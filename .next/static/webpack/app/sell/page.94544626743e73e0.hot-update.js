"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/sell/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkHealth: function() { return /* binding */ checkHealth; },\n/* harmony export */   getChatResponse: function() { return /* binding */ getChatResponse; },\n/* harmony export */   getModels: function() { return /* binding */ getModels; },\n/* harmony export */   improvePrompt: function() { return /* binding */ improvePrompt; },\n/* harmony export */   improvePromptText: function() { return /* binding */ improvePromptText; },\n/* harmony export */   localImprovePrompt: function() { return /* binding */ localImprovePrompt; }\n/* harmony export */ });\n// API client for interacting with the AI gateway\n// Base URL for the API\nconst API_BASE_URL = \"https://secret-ai-gateway.onrender.com\";\n// Function to get available models\nasync function getModels() {\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/models\"), {\n            headers: {\n                \"X-API-Key\": \"bWFzdGVyQHNjcnRsYWJzLmNvbTpTZWNyZXROZXR3b3JrTWFzdGVyS2V5X18yMDI1\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch models: \".concat(response.status));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching models:\", error);\n        return {\n            models: [\n                \"deepseek-r1:70b\",\n                \"llama3.2-vision\"\n            ]\n        }; // Fallback\n    }\n}\n// Function to check API health\nasync function checkHealth() {\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/health\"), {\n            headers: {\n                \"X-API-Key\": \"bWFzdGVyQHNjcnRsYWJzLmNvbTpTZWNyZXROZXR3b3JrTWFzdGVyS2V5X18yMDI1\"\n            }\n        });\n        return response.ok;\n    } catch (error) {\n        console.error(\"Health check failed:\", error);\n        return false;\n    }\n}\n// Function to get chat response\nasync function getChatResponse(prompt) {\n    let model = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"deepseek-r1:70b\";\n    try {\n        // Use the same format as your working test\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/chat?prompt=\").concat(encodeURIComponent(prompt), \"&model=\").concat(model), {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"Chat API error: \".concat(response.status), errorText);\n            throw new Error(\"Chat API error: \".concat(response.status));\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error(\"Error getting chat response:\", error);\n        throw error;\n    }\n}\n// Local fallback function to improve prompts if the API fails\nfunction localImprovePrompt(prompt) {\n    // Simple improvements\n    let improved = prompt;\n    // Add specificity\n    if (prompt.length < 20) {\n        improved = \"\".concat(prompt, \" with detailed examples and step-by-step instructions\");\n    }\n    // Add clarity for vague prompts\n    if (!prompt.includes(\"?\") && prompt.split(\" \").length < 5) {\n        improved = \"Please provide a comprehensive explanation about \".concat(prompt);\n    }\n    // Add structure for longer prompts\n    if (prompt.length > 50 && !prompt.includes(\"1.\") && !prompt.includes(\"First\")) {\n        improved = \"\".concat(prompt, \"\\n\\nPlease structure your response with:\\n1. Introduction\\n2. Main points\\n3. Examples\\n4. Conclusion\");\n    }\n    // If we didn't make any improvements, add a generic enhancement\n    if (improved === prompt) {\n        improved = \"\".concat(prompt, \"\\n\\nPlease provide a detailed, well-structured response with examples where appropriate.\");\n    }\n    return improved;\n}\n// Function to improve a prompt using the new GET endpoint\nasync function improvePromptText(prompt) {\n    let target = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"text\";\n    try {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/improve-prompt?prompt=\").concat(encodeURIComponent(prompt), \"&target=\").concat(target), {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"Improve prompt API error: \".concat(response.status), errorText);\n            return localImprovePrompt(prompt);\n        }\n        const result = await response.json();\n        // Handle the response format: { \"response\": \"<improved prompt>\" }\n        if (result && result.response) {\n            return result.response;\n        }\n        // Fallback to local improvement if response format is unexpected\n        return localImprovePrompt(prompt);\n    } catch (error) {\n        console.error(\"Error improving prompt:\", error);\n        return localImprovePrompt(prompt);\n    }\n}\nasync function improvePrompt(prompt) {\n    try {\n        // The API expects a string as the body, not a JSON object\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/improve-prompt\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"text/plain\",\n                Accept: \"application/json\"\n            },\n            // Send the prompt as a plain string, not a JSON object\n            body: prompt\n        });\n        if (!response.ok) {\n            // Log more details about the error\n            const errorText = await response.text();\n            console.error(\"Improve prompt API error: \".concat(response.status), errorText);\n            // If the API fails, use our local improvement function\n            console.log(\"Using local prompt improvement fallback\");\n            return localImprovePrompt(prompt);\n        }\n        const result = await response.json();\n        // If the API returns the same prompt or an empty result, use our local improvement\n        if (!result || typeof result === \"string\" && (result.trim() === prompt.trim() || result.trim() === \"\") || typeof result === \"object\" && (!result.Response || result.Response.trim() === prompt.trim())) {\n            console.log(\"API returned unchanged prompt, using local improvement\");\n            return localImprovePrompt(prompt);\n        }\n        return result;\n    } catch (error) {\n        console.error(\"Error improving prompt:\", error);\n        // Use local improvement as fallback\n        return localImprovePrompt(prompt);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});